TODO:
* DONE finish new cart form - add price field for items, add datetime field for cart
* DFN verify that new finished cart form works as expected
* DONE remove "price" and add "dollars" and "cents", with defaults to 0, to the cart_item table & forms
* DONE update code to handle dollars and cents [UPDATE: only dollars!] instead of price 
  * DONE modify Cart#total to account for dollars and cents being used instead of price on cart items
  * DONE modify new cart form to account for dollars and cents being used instead of price
  * DONE modify CartsController to permit dollars and cents parameters instead of price
  * SCRATCH THE ABOVE - DONE modify to only use dollars. tell users to round up.
  * DONE modify CartItem#price to reflect that we are now only using dollars
  * DONE modfiy new Cart form to only use dollars & give a 'round up' message
  * DONE modify CartsController
  * DONE enforce min of 1 for dollars field
* DONE update new Cart creation logic:
    * DONE one item to start
    * DONE two buttons: "Done" and "Add Another Item"
    * DONE "Done" -> creates cart & redirects to index
    * DONE "Add Another Item" -> creates cart & redirect to CartItems#new
* DONE implement CartItem#new and CartItem#create
    * DONE two buttons: "Done" and "Add Another Item"
    * DONE "Done" -> saves new cart item to cart and redirects to Carts#index
    * DONE "Add Another Item" -> updates cart & redirects back to CartItem#item
* DONE make sure that cart items and cart stores are getting destroyed whenwe delete a cart
* DONE add tags to stores index
* DONE add tags to items index
* DONE implement create_cart in db seed file
* DONE add a cart to db seed file 



* add carts to navbar
* add one more cart to db seed file
* implement cart index - cart note, total, store, items (note if available, prefab name otherwise)
* add validations
  * tag: name presence, name uniqueness
  * prefab store: name presence, name uniqueness
  * prefab item: name presence, name uniqueness
  * cart:
    * note presence
    * date presence
    * cart store presence
      * cart store note presence, unless there is a prefab
    * cart item 1+ presence
      * cart item price presence, price >= $0.00 (freebies can be logged)
      * cart item note presence, unless there is a prefab
* implement cart update
* implement cart delete
* implement sort: have a checkbox form on the index page, when you submit it posts to a 'sort' action, the sort action gets the correct sort & renders index
* implement profile page - grand total
* implement third party login
* implement error messages / css
* implement styling
* implement Class-level methods: an "alphabetical" one for start
* handle the fact that if cart creation fails, we need the cart_store and cart_items to be available to render :new


// OOS
* add cart sorting - by date, by amount
* add stores sorting - by amount, by name
* add items sorting - by amount,  by name