UsersController
#index - HOME page today's carts with links to edit, Add New Cart button
#show - PROFILE page with username, email[, reset password link]


DFN PrefabStoreController - nested resource of Users
DFN #index - show all the prefab stores for the user - name, link to edit, link to delete
DFN #edit (doubles as #show) - lets you update the name, add tags, remove tags
DFN #new - lets you make a new one: define a name + define, add, and remove tags
DFN #delete - confirm that user is ok with all cart_stores that use this prefab_store losing the prefab_store's tags

DFN PrefabItemsController - nested resource of Users
DFN #index - show all the user's prefab items, name, link to edit, link to delete
DFN #edit (doubles as #show) - lets you update the name, add tags, remove tags
DFN #new - lets you make a new one: give a name and add tags
DFN #delete - confirm that user is ok with all cart_items that use this prefab_item losing the prefab_item's tags

DFN TagController - nested resource of Users
DFN #index - show all tags: name, link to details, link to delete
DFN #new - give name, select prefab items and prefab stores to add the tag to
DFN #create - create the tag and assign it to any chosen prefab stores and prefab items
DFN #edit (doubles as #show) - name, all the user's prefab items and stores that use it
DFN #delete - confirm that user is ok with all prefabs, cart stores, and cart items losing this tag

CartsController - nested resource of Users
#index - show all the user's carts, with links to edit and delete
DFN #new - form to make a new cart.
  DFN date, note

  DFN store_prefab dropdown
  DFN store note field for cart_store
  DFN store tags field for cart_store - bunch of checkboxes?

  3 cart_item forms, for each:
  - DFN price (required)
  - DFN note (optional)
  - DFN dropdown to select a prefab item (optional)
  - DFN checkboxes for item tags (optional)

#edit (doubles as #show) - 
  - lets you change date, note. 
  - lets you edit and delete items. 
  - lets you add another item. 
  - let you edit store.
#create - create the cart
#update - make changes to the items / store, delete items / store /tags / prefabs /, optionally add new item
#delete


Order:
DFN Tags,
DFN Prefab Stores,
DFN Prefab Items,
Carts,
User,
Navbar

Navbar:
New Cart -> Carts#new
Carts -> Carts#index
DONE Stores -> PrefabStores#index
DONE Items -> PrefabItems#index
DONE Tags -> Tags#index
DONE Signout -> Sessions#Logout
DONE Home -> Users#index
Profile -> Users#show
When logged out:
DONE Log In -> Welcome#home
DONE Sign Up -> Users#news


TODO:
* DONE finish new cart form - add price field for items, add datetime field for cart
* DFN verify that new finished cart form works as expected
* implement Class-level methods - sort with these - have a checkbox form on the index page, when you submit it posts to a 'sort' action, the sort action gets the correct sort & renders index
* implement cart index - cart note, total, store, items (note if available, prefab name otherwise)
* implement cart update
* implement cart delete
* add tags to stores index
* add tags to items index
* add prefab stores and items to tags index
* implement profile page - grand total
* implement third party login
* implement error messages / css
* implement styling
* handle the fact that if cart creation fails, we need the cart_store and cart_items 


// OOS
* add cart sorting - by date, by amount
* add stores sorting - by amount, by name
* add items sorting - by amount,  by name











README instructions:

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...
