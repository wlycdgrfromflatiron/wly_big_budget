TODO:
* DONE finish new cart form - add price field for items, add datetime field for cart
* DFN verify that new finished cart form works as expected
* DONE remove "price" and add "dollars" and "cents", with defaults to 0, to the cart_item table & forms
* update code to handle dollars and cents instead of price 
  * DONE modify Cart#total to account for dollars and cents being used instead of price on cart items
  * DONE modify new cart form to account for dollars and cents being used instead of price
  * modify CartsController to permit dollas and cents parameters instead of price
  * limit dollars field to 0 or more
  * limit cents field to between 0 and 99
* add tags to stores index
* add tags to items index
* add a couple carts to db seed file 
* implement Class-level methods - sort with these - have a checkbox form on the index page, when you submit it posts to a 'sort' action, the sort action gets the correct sort & renders index
* implement cart index - cart note, total, store, items (note if available, prefab name otherwise)
* add validations
  * tag: name presence, name uniqueness
  * prefab store: name presence, name uniqueness
  * prefab item: name presence, name uniqueness
  * cart:
    * note presence
    * date presence
    * cart store presence
      * cart store note presence, unless there is a prefab
    * cart item 1+ presence
      * cart item price presence, price >= $0.00 (freebies can be logged)
      * cart item note presence, unless there is a prefab
* implement cart update
* implement cart delete
* add prefab stores and items to tags index
* implement profile page - grand total
* implement third party login
* implement error messages / css
* implement styling
* handle the fact that if cart creation fails, we need the cart_store and cart_items to be available to render :new


// OOS
* add cart sorting - by date, by amount
* add stores sorting - by amount, by name
* add items sorting - by amount,  by name