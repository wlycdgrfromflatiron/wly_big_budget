TODO:
* DONE finish new cart form - add price field for items, add datetime field for cart
* DFN verify that new finished cart form works as expected
* DONE remove "price" and add "dollars" and "cents", with defaults to 0, to the cart_item table & forms
* DONE update code to handle dollars and cents [UPDATE: only dollars!] instead of price 
  * DONE modify Cart#total to account for dollars and cents being used instead of price on cart items
  * DONE modify new cart form to account for dollars and cents being used instead of price
  * DONE modify CartsController to permit dollars and cents parameters instead of price
  * SCRATCH THE ABOVE - DONE modify to only use dollars. tell users to round up.
  * DONE modify CartItem#price to reflect that we are now only using dollars
  * DONE modfiy new Cart form to only use dollars & give a 'round up' message
  * DONE modify CartsController
  * DONE enforce min of 1 for dollars field
* DONE update new Cart creation logic:
    * DONE one item to start
    * DONE two buttons: "Done" and "Add Another Item"
    * DONE "Done" -> creates cart & redirects to index
    * DONE "Add Another Item" -> creates cart & redirect to CartItems#new
* DONE implement CartItem#new and CartItem#create
    * DONE two buttons: "Done" and "Add Another Item"
    * DONE "Done" -> saves new cart item to cart and redirects to Carts#index
    * DONE "Add Another Item" -> updates cart & redirects back to CartItem#item
* DONE make sure that cart items and cart stores are getting destroyed whenwe delete a cart
* DONE add tags to stores index
* DONE add tags to items index
* DONE implement create_cart in db seed file
* DONE add a cart to db seed file 
* DONE add carts to navbar
* DONE add one more cart to db seed file (added a couple tags too, and an item tag processing bit to the create_cart method)
* DONE implement cart index - 
  * DONE heading 
  * DONE basic layout formatting
  * DONE for each cart: 
    - DONE note
    - DONE total
    - DONE date
    - DONE show link
    - DONE edit link
    - DONE delete link
* DONE implement cart destroy
* DONE implement cart show 
  - DONE EDIT link
  - DONE DELETE link
  - DONE ADD ITEM link
  - DONE note
  - DONE total
  - DONE date
  - DONE store
    - DONE note
    - DONE prefab name. 
    - DONE SHOW link if prefab
    - DONE store tags
  - DONE items
    - DONE note
    - DONE prefab name. SHOW link if prefab
    - DONE item tags
* DONE fix bug where tags are listed twice in add cart item form
* DONE make it so that Done redirects to Cart show view from add cart item form
* DONE implement Cart#edit
  * DONE user can edit note
  * DONE user can edit date
  * DONE store:
      DONE user can edit note
      DONE user can change / remove prefab
      DONE user can add / remove tags
  * DONE items:
    DONE for each item, user can:
      * DONE change note
      * DONE change / remove prefab
      * DONE add / remove tags
      * DONE change price
  * DONE DONE button
  * DONE CANCEL button
* DONE implement PrefabStore#show
  * DONE add route
  * DONE add controller action
  * DONE redirect there after editing a PrefabStore
  * DONE add #total_spent method to model
  * DONE add link to PrefabStores#index
  * DONE have the following fields on the page:
    * DONE name
    * DONE tags (with links to their show pages, maybe)
    * DONE carts
      * DONE note, date, total, link to cart
    * DONE total spent
    * DONE Edit button 
    * DONE Delete button
 * DONE implement Tags#show
  * DONE add route
  * DONE add controller action
  * DONE redirect there after editing a Tag
  * DONE add #total_spent method to model
  * DONE add #cart_items_directly_or_through_prefab to model
  * DONE add #carts to Tag model
  * DONE add link to Tag#index
  * DONE have the following fields on the form:
    * DONE name
    * DONE prefab stores (with links to their show pages )
    * DONE prefab items (with links to their show pages)
    * DONE cart items (directly or through prefab items)
    * DONE carts
    * DONE total spent 
    * DONE edit link
    * DONE delete link 

* DONE implement third party login
* DONE implement PrefabItem#show
  * DONE add route
  * DONE add controller action
  * redirect there after editing a PrefabItem
  * DONE add #total_spent method to model
  * DONE add link to PrefabItems#index
  * DONE have the following fields on the page:
    * DONE name
    * DONE tags (with links to their show pages)
    * DONE list of cart items that use prefab, with, for each
      * DONE name
      * DONE price
      * DONE its cart (link)
    * DONE total spent
    * DONE edit link
    * DONE delete link

    

* implement Cart::total_spent for user profile page! 
That's my class method!
* add validations
  * tag: name presence, name uniqueness
  * prefab store: name presence, name uniqueness
  * prefab item: name presence, name uniqueness
  * cart:
    * note presence
    * date presence
    * cart store presence
      * cart store note presence, unless there is a prefab
    * cart item 1+ presence
      * cart item price presence, price >= $0.00 (freebies can be logged)
      * cart item note presence, unless there is a prefab
* implement error messages / css


* implement styling



// FOR LATER
* generalize CartsController#Create, passing in whether to redirect to new item form as a param
* add cart sorting - by date, by amount
* add stores sorting - by amount, by name
* add items sorting - by amount,  by name
* handle the fact that if cart creation fails, we need the cart_store and cart_items to be available to render :new
* better tags implementation: type a comma-separated list into a text area. backend automatically finds or creates the tags